<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andrew Amis</title>
    <link>http://atamis.me/</link>
    <description>Recent content on Andrew Amis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Aug 2018 20:44:24 -0700</lastBuildDate>
    
	<atom:link href="http://atamis.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ironic Space Lisp Part 5</title>
      <link>http://atamis.me/posts/2018-08-19-ironic-space-lisp-part-5/</link>
      <pubDate>Sun, 19 Aug 2018 20:44:24 -0700</pubDate>
      
      <guid>http://atamis.me/posts/2018-08-19-ironic-space-lisp-part-5/</guid>
      <description>Let&amp;rsquo;s talk about environmental bindings. I&amp;rsquo;m taking the unusual (I think) approach of sharing environment bindings code between the VM and the interpreter. Unfortunately, I wrote the environment code at the same time as the VM, and fit the code a little too closely to the requirements of the VM, and didn&amp;rsquo;t think enough about what the interpreter would require. In the process of writing the interpreter, I encountered a strong disconnect between the semantics that I wanted and the semantics I had.</description>
    </item>
    
    <item>
      <title>Operators</title>
      <link>http://atamis.me/posts/2018-08-15-operators/</link>
      <pubDate>Wed, 15 Aug 2018 16:21:39 -0700</pubDate>
      
      <guid>http://atamis.me/posts/2018-08-15-operators/</guid>
      <description>I recently started thinking about operators and math in programming languages. This is at least partly inspired by the programming language I&amp;rsquo;m making right now, but I&amp;rsquo;ll get to that later. It&amp;rsquo;s also inspired, in some sense, by the tutorials I was reading while trying to successfully parse my programming language. I didn&amp;rsquo;t find a tutorial specifically for what I was trying to do, which was fair, but I did find tutorials on parsing other more &amp;ldquo;normal&amp;rdquo; languages or more C-like languages, and it got me thinking.</description>
    </item>
    
    <item>
      <title>Ironic Space Lisp Part 4</title>
      <link>http://atamis.me/posts/2018-08-12-ironic-space-lisp-part-4/</link>
      <pubDate>Sun, 12 Aug 2018 00:41:11 -0700</pubDate>
      
      <guid>http://atamis.me/posts/2018-08-12-ironic-space-lisp-part-4/</guid>
      <description>This update is all about parsing, and this ended up being really difficult. Not in a good way though. In my last post, I talked about using languages so difficult and alien that the difficulty clearly signified that there was something important you could learn from mastering them. I didn&amp;rsquo;t find this was the case during this phase of the project.
$ cargo run Compiling ironic-space-lisp v0.1.0 (file:///home/andrew/src/rust/ironic-space-lisp) error: no rules expected the token `,` --&amp;gt; src/parser.</description>
    </item>
    
    <item>
      <title>Ironic Space Lisp Part 3</title>
      <link>http://atamis.me/posts/2018-08-10-ironic-space-lisp-part-3/</link>
      <pubDate>Fri, 10 Aug 2018 17:09:28 -0700</pubDate>
      
      <guid>http://atamis.me/posts/2018-08-10-ironic-space-lisp-part-3/</guid>
      <description>Have you ever been working on a project and felt stupid and scared? Not in an anxious way, and not in an imposter syndrome way, but in a visceral way, like &amp;ldquo;I don&amp;rsquo;t really know what I&amp;rsquo;m doing, and I&amp;rsquo;m not sure I can do this.&amp;rdquo; Some languages are so complex and different that, although I know they&amp;rsquo;re full feature and Turing complete languages, I don&amp;rsquo;t know that I can even write whatever program I&amp;rsquo;m trying to make.</description>
    </item>
    
    <item>
      <title>I hate Go, and I think it&#39;s really cool</title>
      <link>http://atamis.me/posts/2018-08-01-golang/</link>
      <pubDate>Wed, 01 Aug 2018 14:02:48 -0700</pubDate>
      
      <guid>http://atamis.me/posts/2018-08-01-golang/</guid>
      <description>My first impression of Go was, ironically, &amp;ldquo;kinda generic&amp;rdquo;. It&amp;rsquo;s an imperative language from Google inspired by Python (a little generic) and Java (reigning king of generic languages,) so some amount of &amp;ldquo;recognition&amp;rdquo; is due. Go wears its influences proudly on its sleeve, which is a little weird, because it&amp;rsquo;s not a particularly noteworthy heritage.
The interesting thing (to me at least), is that this is all on purpose. Boring on purpose is an engineering feature, because excessively complicated languages are harder to work on, and produce harder to maintain code.</description>
    </item>
    
    <item>
      <title>A Hybrid Course</title>
      <link>http://atamis.me/posts/2018-07-29-a-hybrid-course/</link>
      <pubDate>Sun, 29 Jul 2018 20:05:19 -0700</pubDate>
      
      <guid>http://atamis.me/posts/2018-07-29-a-hybrid-course/</guid>
      <description>I took a lot of interesting courses in college, but I wanted to talk about a particular course that you might call a &amp;ldquo;hybrid course&amp;rdquo;. This particular course was outside my major: I was required to take non-CS courses to get my degree, but by senior year, I had also run out of CS courses to take; what is a man to do? Take a course on Ovid and Medieval Literature.</description>
    </item>
    
    <item>
      <title>Ironic Space Lisp Part 2</title>
      <link>http://atamis.me/posts/2018-07-09-ironic-space-lisp-part-2/</link>
      <pubDate>Sun, 29 Jul 2018 10:59:40 -0700</pubDate>
      
      <guid>http://atamis.me/posts/2018-07-09-ironic-space-lisp-part-2/</guid>
      <description>Part 1
Part 2
Last time, the conceptual challenges of a the stack VM convinced me it was the wrong approach. In a normal recursive lisp interpreter, code is data, and you have a single evaluator function over every value. Follow along here.
/// Omni-datatype. Represents both data and code for the lisp VM. #[derive(Debug, Clone)]pubenum Lisp{/// Represents a single u32 number. Num(u32),/// Represents an operation see `Op` for more info.</description>
    </item>
    
    <item>
      <title>Ironic Space Lisp Part 1</title>
      <link>http://atamis.me/posts/2018-07-29-ironic-space-lisp/</link>
      <pubDate>Sun, 29 Jul 2018 02:03:01 -0700</pubDate>
      
      <guid>http://atamis.me/posts/2018-07-29-ironic-space-lisp/</guid>
      <description>Part 1
Part 2
I recently had a new idea for a space programming game. The idea isn&amp;rsquo;t done, although the planning document is getting lengthy. Programming games need programming languages, and based on the game design, I had some pretty particular specifications for the language.
 Sandboxed Concurrent Preemptive  Although the design hasn&amp;rsquo;t settled fully, I&amp;rsquo;m currently planning on executing code on the server, which means the language needs to be able to be sandboxed in two senses: it shouldn&amp;rsquo;t be able to access the server outside of approved channels, and it shouldn&amp;rsquo;t be able to access other threads outside of approved channels.</description>
    </item>
    
    <item>
      <title>Game Idea: Compressed Dungeons, pt. 1</title>
      <link>http://atamis.me/posts/2018-05-04-game-idea-micro-dungeon.html/</link>
      <pubDate>Fri, 04 May 2018 09:29:00 +0000</pubDate>
      
      <guid>http://atamis.me/posts/2018-05-04-game-idea-micro-dungeon.html/</guid>
      <description>tldr: moba keystone dungeons
Traditional cRPGs are, in general, united by a strong emphasis on character progression. By playing the game, and completing challenges, your character gains experience, sometimes represented by literal experience points, and becomes stronger, more capable, and better equipped for even more challenging encounters. This is frequently associated with numerical increases (allowing you to crush old content with pure numerical advantage), and in many cases, although you grow stronger your enemies do to at a carefully controlled rate that matches yours, and in some cases comparatively exceeds yours, making later enemies harder and harder to kill so the gameplay still has a positive difficulty curve.</description>
    </item>
    
    <item>
      <title>Hacking Turntable for Fun and Music</title>
      <link>http://atamis.me/posts/2011-11-25-hacking-turntable-for-fun-and-music/</link>
      <pubDate>Fri, 25 Nov 2011 15:12:00 +0000</pubDate>
      
      <guid>http://atamis.me/posts/2011-11-25-hacking-turntable-for-fun-and-music/</guid>
      <description>Previous Solutions Turntable is a collaborative DJ website that lets people play music to an online audience. Turntable, by default, doesn&amp;rsquo;t let you download the music you hear. If you hover over the track name in the UI, you can scrobble the track to Last.fm, find it in Spotify or Rdio, etc. Some people (myself included, but we&amp;rsquo;ll get to that later) wanted to download the files being played.</description>
    </item>
    
    <item>
      <title>4x Game</title>
      <link>http://atamis.me/games/4x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://atamis.me/games/4x/</guid>
      <description>This game was made by Nick Care, Andrew Amis, Robert Tomcik, and Kirk Pearson. Its design is reminiscent of such games as Civilization and Creeper World. It was made under a strict deadline between February 10th and March 16th of 2016. It was the first game the group made together (see the second) and does not present an entirely coherent or bug-free experience. It also eschews almost all in-game instruction, so I&amp;rsquo;ve included the instruction manual below.</description>
    </item>
    
    <item>
      <title>Employment</title>
      <link>http://atamis.me/employment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://atamis.me/employment/</guid>
      <description>Download my resume</description>
    </item>
    
    <item>
      <title>Hexdecks</title>
      <link>http://atamis.me/games/hexdecks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://atamis.me/games/hexdecks/</guid>
      <description>This is a deck-based turn-taking puzzle-combat game. Reminiscent of Hoplite, it puts the players in the shoes of a warrior making his way through an increasingly blighted landscape. From the idyllic forest of &amp;ldquo;Faerie Forest&amp;rdquo; to hellish &amp;ldquo;Subsea Volcano&amp;rdquo; to the ominous &amp;ldquo;Decrepit Crypt&amp;rdquo;, reach the level ending warpgate through the twin dangers of things trying to kill you and a brutal action economy.
Click to move or click to attack, but neither you nor your opponents can do both at once, so make sure you aren&amp;rsquo;t in range of an enemy when you end your turn.</description>
    </item>
    
    <item>
      <title>Planet 5</title>
      <link>http://atamis.me/games/planet5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://atamis.me/games/planet5/</guid>
      <description>Planet 5 is slow paced survival RTS. It is set on a hostile alien planet populated by murderous aliens trying to kill you. You must defend yourself for as long as possible. Spread your network across the alien planet with relays, generate and store energy with capacitors and solar farms, research and improve your buildings with the science lab, and defend the rest of your buildings with powerful laser turrets and mortars.</description>
    </item>
    
  </channel>
</rss>