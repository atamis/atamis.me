<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>elixir on Azrea Amis</title>
    <link>/tags/elixir/</link>
    <description>Recent content in elixir on Azrea Amis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sat, 03 Nov 2018 19:28:01 -0700</lastBuildDate>
    
	<atom:link href="/tags/elixir/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pipeline Operators</title>
      <link>/posts/2018-11-3-pipeline-operators/</link>
      <pubDate>Sat, 03 Nov 2018 19:28:01 -0700</pubDate>
      
      <guid>/posts/2018-11-3-pipeline-operators/</guid>
      <description>Pipeline &amp;ldquo;operators&amp;rdquo; or &amp;ldquo;threading&amp;rdquo;1 constructs are interesting language constructs. They are an acknowledgement that functional code can be a little obtuse. They reorient (or rewrite) functional code so it looks more like a &amp;ldquo;dataflow&amp;rdquo;. Particularly of Lisps, but also of some other functional languages, execution moves from the inside of expressions to the outside in a way that&amp;rsquo;s not particularly natural feeling. It&amp;rsquo;s a real source of the difficulty people express when reading functional code.</description>
    </item>
    
    <item>
      <title>Flows the Wrong Way, Part 2: The Right Way</title>
      <link>/posts/2018-10-13-flows-the-wrong-way-part-2/</link>
      <pubDate>Sat, 13 Oct 2018 12:36:21 -0700</pubDate>
      
      <guid>/posts/2018-10-13-flows-the-wrong-way-part-2/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;/posts/2018-10-10-flows-the-wrong-way/&#34;&gt;last post&lt;/a&gt;, I covered my first attempt to implement TCP streaming in
&lt;code&gt;Flow&lt;/code&gt;, a data flow library for Elixir. My first attempts involved a bunch of
failed Unix sockets, and an attempt to implement a &lt;code&gt;GenStage&lt;/code&gt; that failed for
reasons I didn&amp;rsquo;t understand. I eventually settled on this:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flows the Wrong Way: Streaming into Elixir</title>
      <link>/posts/2018-10-10-flows-the-wrong-way/</link>
      <pubDate>Wed, 10 Oct 2018 15:41:01 -0700</pubDate>
      
      <guid>/posts/2018-10-10-flows-the-wrong-way/</guid>
      <description>As part of a new and exciting project, I was faced with the task of ingesting a large amount of more or less homogeneous JSON data into a SQL database for an associate of mine to do some rudimentary business intelligence analysis on it. The context complicated things: the bulk data was a bunch of historical social media data, and in future he would also want to ingest the live API in addition to this archived historical data.</description>
    </item>
    
  </channel>
</rss>